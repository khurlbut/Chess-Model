package strategy;

import java.util.List;

import model.board.ChessBoard;
import model.board.GameEvent;
import model.enums.Color;

public class BruteForceGameStrategy implements GameStrategy {

    BoardInterrogator boardInterrogator = new BoardInterrogator();

    @Override
    public GameEvent nextMove(Color color, ChessBoard chessBoard) {

        ChessBoard boardAfterMove = null;

        List<GameEvent> moves = chessBoard.potentialGameEvents(color);

        for (GameEvent move : moves) {
            boardAfterMove = chessBoard.playEvent(move);

            ChessBoard boardAfterResponse = null;
            MoveGrade worstCaseResponse = null;

            List<GameEvent> potentialResponses = boardAfterMove.potentialGameEvents(color.opponentColor());

            for (GameEvent moveResponse : potentialResponses) {
                boardAfterResponse = boardAfterMove.playEvent(moveResponse);

                BoardGrade grade = boardInterrogator.grade(boardAfterResponse, color);
                MoveGrade moveGrade = new MoveGrade(moveResponse, grade);

                if (worstCaseResponse == null) {
                    worstCaseResponse = moveGrade;
                }

                worstCaseResponse = worstCaseResponse.lowerGrade(moveGrade);
            }

            MoveGrade bestMove = new MoveGrade(move, worstCaseResponse.grade);

        }

        return null;
    }

    private class MoveGrade {

        private GameEvent move;
        private BoardGrade grade;

        public MoveGrade(GameEvent moveResponse, BoardGrade grade) {
            this.move = moveResponse;
            this.grade = grade;
        }

        public MoveGrade lowerGrade(MoveGrade otherGrade) {
            return new MoveGrade(move, grade.lowerGrade(otherGrade.grade));
        }

    }

}
