package model.board.views;

import model.Piece;
import model.board.BoardPosition;
import model.board.ChessBoard;
import model.board.GameEvent;
import model.board.Square;
import model.enums.Color;
import model.enums.Rank;

public class RankViewFactory {

    public static RankView rankView(GameEvent event, ChessBoard chessBoard) {
        Square s = event.source();
        Piece p = chessBoard.pieceAt(s);

        return RankViewFactory.rankView(p, chessBoard, s);
    }

    public static RankView rankView(Piece piece, ChessBoard chessBoard) {
        return rankView(piece.rank(), piece.color(), chessBoard, chessBoard.squareHolding(piece));
    }

    private static RankView rankView(Piece piece, ChessBoard chessBoard, Square viewPoint) {
        return rankView(piece.rank(), piece.color(), chessBoard, viewPoint);
    }

    private static RankView rankView(Rank rank, Color color, ChessBoard chessBoard, Square viewPoint) {
        BoardPosition boardPosition = new BoardPosition(chessBoard, viewPoint);
        switch (rank) {
            case Pawn:
                return new PawnView(boardPosition, color);
            case Rook:
                return new RookView(boardPosition, color);
            case Knight:
                return new KnightView(boardPosition, color);
            case Bishop:
                return new BishopView(boardPosition, color);
            case Queen:
                return new QueenView(boardPosition, color);
            case King:
                return new KingView(boardPosition, color);
            default:
                throw new RuntimeException("This should never happen! Rank is: " + rank);
        }
    }

}
