<?xml version="1.0" encoding="UTF-8"?><testrun name="test" project="Model" tests="114" started="114" failures="0" errors="0" ignored="0">
  <testsuite name="model.board.views.BishopViewTest" time="0.037">
    <testcase name="it_finds_move_to_squares" classname="model.board.views.BishopViewTest" time="0.004"/>
    <testcase name="it_finds_threatened_squares" classname="model.board.views.BishopViewTest" time="0.0"/>
    <testcase name="it_finds_squares_holding_pieces_attacked" classname="model.board.views.BishopViewTest" time="0.03"/>
    <testcase name="it_finds_squares_holding_pieces_defended" classname="model.board.views.BishopViewTest" time="0.003"/>
  </testsuite>
  <testsuite name="model.enums.RowTest" time="0.001">
    <testcase name="row_one_Up_from_row1_is_row2" classname="model.enums.RowTest" time="0.0"/>
    <testcase name="row_one_Up_from_row8_is_Null" classname="model.enums.RowTest" time="0.0"/>
    <testcase name="row_name_format_is_as_follows" classname="model.enums.RowTest" time="0.0"/>
    <testcase name="row_four_down_from_row_6_is_row2" classname="model.enums.RowTest" time="0.0"/>
    <testcase name="row_three_up_from_row3_is_row6" classname="model.enums.RowTest" time="0.0"/>
    <testcase name="row_one_Down_from_row1_is_Null" classname="model.enums.RowTest" time="0.0"/>
    <testcase name="row_one_Down_from_row8_is_row7" classname="model.enums.RowTest" time="0.001"/>
  </testsuite>
  <testsuite name="model.board.views.RookViewTest" time="0.004">
    <testcase name="it_finds_move_to_squares" classname="model.board.views.RookViewTest" time="0.0"/>
    <testcase name="it_finds_threatened_squares" classname="model.board.views.RookViewTest" time="0.001"/>
    <testcase name="it_finds_squares_holding_pieces_attacked" classname="model.board.views.RookViewTest" time="0.001"/>
    <testcase name="it_finds_squares_holding_pieces_defended" classname="model.board.views.RookViewTest" time="0.002"/>
  </testsuite>
  <testsuite name="model.enums.ColorTest" time="0.0">
    <testcase name="color_name_format_is_as_follows" classname="model.enums.ColorTest" time="0.0"/>
    <testcase name="it_knows_the_opponent_color" classname="model.enums.ColorTest" time="0.0"/>
  </testsuite>
  <testsuite name="model.board.GameEventNamesTest" time="0.001">
    <testcase name="captureEvent_name_format_is_as_follows" classname="model.board.GameEventNamesTest" time="0.0"/>
    <testcase name="removeEvent_name_format_is_as_follows" classname="model.board.GameEventNamesTest" time="0.0"/>
    <testcase name="putEvent_name_format_is_as_follows" classname="model.board.GameEventNamesTest" time="0.001"/>
    <testcase name="moveEvent_name_format_is_as_follows" classname="model.board.GameEventNamesTest" time="0.0"/>
  </testsuite>
  <testsuite name="model.board.BoardSetterTest" time="0.09">
    <testcase name="all_the_pieces_are_in_the_correct_places" classname="model.board.BoardSetterTest" time="0.09"/>
  </testsuite>
  <testsuite name="model.board.BackingMapTest" time="0.012">
    <testcase name="illegalArgumentException_is_thrown_when_an_attemp_is_made_to_move_to_an_occupied_square" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="illegalArgumentException_is_thrown_when_attempting_to_set_a_piece_on_a_square_that_is_occupied_by_the_same_piece" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="illegalArgumentException_is_thrown_when_an_attemp_is_made_to_move_to_the_same_square" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="it_returns_the_square_holding_a_piece" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="it_can_replace_the_piece_on_square2_with_the_piece_on_square1" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="illegalArgumentException_is_thrown_when_an_attempt_is_made_to_remove_from_an_empty_square" classname="model.board.BackingMapTest" time="0.0"/>
    <testcase name="illegalArgumentException_is_thrown_when_an_attempt_is_made_to_replace_from_an_empty_square" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="illegalArgumentException_is_thrown_when_attempting_to_set_a_piece_on_a_square_that_is_occupied_by_a_new_piece" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="illegalArgumentException_is_thrown_when_an_attemp_is_made_to_a_piece_in_twice" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="it_remembers_previous_pieces_when_a_new_piece_is_set" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="it_returns_the_piece_set_on_a_square" classname="model.board.BackingMapTest" time="0.0"/>
    <testcase name="illegalArgumentException_is_thrown_when_an_attempt_is_made_to_replace_on_an_empty_square" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="it_returns_null_when_for_an_empty_square" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="it_can_move_a_piece_from_square1_to_square2" classname="model.board.BackingMapTest" time="0.001"/>
    <testcase name="illegalArgumentException_is_thrown_when_an_attempt_is_made_to_move_from_an_empty_square" classname="model.board.BackingMapTest" time="0.0"/>
  </testsuite>
  <testsuite name="model.enums.RankTest" time="0.0">
    <testcase name="rank_name_format_is_as_follows" classname="model.enums.RankTest" time="0.0"/>
  </testsuite>
  <testsuite name="model.enums.ViewDistanceTest" time="0.0">
    <testcase name="test" classname="model.enums.ViewDistanceTest" time="0.0"/>
  </testsuite>
  <testsuite name="model.board.SquareTest" time="0.002">
    <testcase name="neighbor_at_board_edge_is_null" classname="model.board.SquareTest" time="0.001"/>
    <testcase name="neighbor_DOWN" classname="model.board.SquareTest" time="0.0"/>
    <testcase name="neighbor_LEFT" classname="model.board.SquareTest" time="0.0"/>
    <testcase name="neighbor_RIGHT_DOWN" classname="model.board.SquareTest" time="0.0"/>
    <testcase name="neighbor_LEFT_UP" classname="model.board.SquareTest" time="0.0"/>
    <testcase name="square_name_format_is_as_follows" classname="model.board.SquareTest" time="0.0"/>
    <testcase name="neighbor_UP" classname="model.board.SquareTest" time="0.0"/>
    <testcase name="neighbor_UP_RIGHT" classname="model.board.SquareTest" time="0.0"/>
    <testcase name="neighbor_LEFT_DOWN" classname="model.board.SquareTest" time="0.0"/>
    <testcase name="neighbor_RIGHT" classname="model.board.SquareTest" time="0.001"/>
  </testsuite>
  <testsuite name="model.board.ChessBoardTest" time="0.017">
    <testcase name="playEvent_throws_exception_if_a_Put_is_called_on_an_occupied_square" classname="model.board.ChessBoardTest" time="0.0"/>
    <testcase name="playEvent_allows_a_Put_event_if_the_board_is_unset" classname="model.board.ChessBoardTest" time="0.001"/>
    <testcase name="setBoardForGame_sets_the_board" classname="model.board.ChessBoardTest" time="0.002"/>
    <testcase name="playEvent_throws_exception_if_a_Remove_is_called_on_an_empty_square" classname="model.board.ChessBoardTest" time="0.0"/>
    <testcase name="playEvent_plays_a_Capture_event" classname="model.board.ChessBoardTest" time="0.002"/>
    <testcase name="playing_a_Capture_event_before_the_board_has_been_set_throws_an_exception" classname="model.board.ChessBoardTest" time="0.001"/>
    <testcase name="it_returns_a_list_of_pieces_by_color" classname="model.board.ChessBoardTest" time="0.002"/>
    <testcase name="playEvent_allows_a_Remove_event_if_the_board_is_unset" classname="model.board.ChessBoardTest" time="0.001"/>
    <testcase name="playEvent_plays_a_Move_event" classname="model.board.ChessBoardTest" time="0.002"/>
    <testcase name="default_constructor_creates_an_unSet_board" classname="model.board.ChessBoardTest" time="0.0"/>
    <testcase name="playEvent_throws_exception_if_a_Put_is_called_after_the_board_is_set" classname="model.board.ChessBoardTest" time="0.001"/>
    <testcase name="it_retains_a_history_of_GameEvents" classname="model.board.ChessBoardTest" time="0.002"/>
    <testcase name="setBoardForGameInProgress_sets_the_board" classname="model.board.ChessBoardTest" time="0.0"/>
    <testcase name="playing_a_Move_event_before_the_board_has_been_set_throws_an_exception" classname="model.board.ChessBoardTest" time="0.0"/>
    <testcase name="playEvent_throws_exception_if_a_Put_is_called_with_an_existing_piece_on_the_board" classname="model.board.ChessBoardTest" time="0.001"/>
    <testcase name="playEvent_throws_exception_if_a_Remove_is_called_after_the_board_is_set" classname="model.board.ChessBoardTest" time="0.001"/>
    <testcase name="setBoardInProgress_throws_exception_if_the_board_is_empty" classname="model.board.ChessBoardTest" time="0.0"/>
  </testsuite>
  <testsuite name="model.board.views.KingViewTest" time="0.005">
    <testcase name="it_finds_move_to_squares" classname="model.board.views.KingViewTest" time="0.001"/>
    <testcase name="king_cannot_move_into_check" classname="model.board.views.KingViewTest" time="0.003"/>
    <testcase name="king_cannot_attack_beyond_the_inner_box" classname="model.board.views.KingViewTest" time="0.0"/>
    <testcase name="it_finds_threatened_to_squares" classname="model.board.views.KingViewTest" time="0.0"/>
    <testcase name="it_finds_squares_holding_pieces_attacked" classname="model.board.views.KingViewTest" time="0.0"/>
    <testcase name="it_finds_squares_holding_pieces_defended" classname="model.board.views.KingViewTest" time="0.001"/>
  </testsuite>
  <testsuite name="model.board.views.KnightViewTest" time="0.001">
    <testcase name="it_finds_move_to_squares" classname="model.board.views.KnightViewTest" time="0.0"/>
    <testcase name="it_finds_threatened_squares" classname="model.board.views.KnightViewTest" time="0.0"/>
    <testcase name="it_finds_squares_holding_pieces_attacked" classname="model.board.views.KnightViewTest" time="0.001"/>
    <testcase name="it_finds_squares_holding_pieces_defended" classname="model.board.views.KnightViewTest" time="0.0"/>
  </testsuite>
  <testsuite name="model.board.views.PawnViewTest" time="0.001">
    <testcase name="it_finds_move_to_squares" classname="model.board.views.PawnViewTest" time="0.0"/>
    <testcase name="it_finds_threatened_squares" classname="model.board.views.PawnViewTest" time="0.0"/>
    <testcase name="it_finds_squares_holding_pieces_attacked" classname="model.board.views.PawnViewTest" time="0.0"/>
    <testcase name="it_finds_squares_holding_pieces_defended" classname="model.board.views.PawnViewTest" time="0.001"/>
  </testsuite>
  <testsuite name="model.enums.ColumnTest" time="0.001">
    <testcase name="column_to_the_left_of_columnA_is_Null" classname="model.enums.ColumnTest" time="0.0"/>
    <testcase name="column_to_the_right_of_columnG_is_ColumnH" classname="model.enums.ColumnTest" time="0.0"/>
    <testcase name="column_name_format_is_as_follows" classname="model.enums.ColumnTest" time="0.0"/>
    <testcase name="column_3_to_the_right_of_columnD_is_ColumnG" classname="model.enums.ColumnTest" time="0.0"/>
    <testcase name="column_to_the_right_of_columnH_is_Null" classname="model.enums.ColumnTest" time="0.0"/>
    <testcase name="column_4_to_the_left_of_columnF_is_ColumnB" classname="model.enums.ColumnTest" time="0.0"/>
    <testcase name="column_to_the_left_of_columnB_is_ColumnA" classname="model.enums.ColumnTest" time="0.001"/>
  </testsuite>
  <testsuite name="model.enums.DirectionTest" time="0.002">
    <testcase name="testLeftDown" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testRight" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testDown" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testLeft" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testRightDown" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testRightUpUp" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testUp" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testRightRightUp" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testLeftDownDown" classname="model.enums.DirectionTest" time="0.001"/>
    <testcase name="direction_name_format_is_as_follows" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testLeftLeftDown" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testRightUp" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testLeftLeftUp" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testLeftUp" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testRightDownDown" classname="model.enums.DirectionTest" time="0.0"/>
    <testcase name="testRightRightDown" classname="model.enums.DirectionTest" time="0.001"/>
  </testsuite>
  <testsuite name="model.ChessPieceTest" time="0.006">
    <testcase name="it_finds_defendedPieces" classname="model.ChessPieceTest" time="0.001"/>
    <testcase name="it_finds_piecesAttacked" classname="model.ChessPieceTest" time="0.001"/>
    <testcase name="it_finds_all_potentialGameEvents" classname="model.ChessPieceTest" time="0.0"/>
    <testcase name="it_finds_supportingPieces" classname="model.ChessPieceTest" time="0.001"/>
    <testcase name="it_finds_only_legal_potentialGameEvents" classname="model.ChessPieceTest" time="0.002"/>
    <testcase name="piece_name_format_is_as_follows" classname="model.ChessPieceTest" time="0.0"/>
    <testcase name="it_finds_attackingPieces" classname="model.ChessPieceTest" time="0.001"/>
  </testsuite>
  <testsuite name="model.board.views.QueenViewTest" time="0.001">
    <testcase name="it_finds_move_to_squares" classname="model.board.views.QueenViewTest" time="0.0"/>
    <testcase name="it_finds_threatened_squares" classname="model.board.views.QueenViewTest" time="0.0"/>
    <testcase name="it_finds_squares_holding_pieces_attacked" classname="model.board.views.QueenViewTest" time="0.001"/>
    <testcase name="it_finds_squares_holding_pieces_defended" classname="model.board.views.QueenViewTest" time="0.0"/>
  </testsuite>
</testrun>
